version: "3.7"
services:
  postgres:
    image: postgres:13
    container_name: postgres
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: challenge1mA!
      POSTGRES_DB: challenge
    networks:
      - backend
    volumes:
      - postgres_data:/var/lib/postgresql/data

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    restart: always
    ports:
      - "8881:80"
    depends_on:
      - postgres
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: adminpass
    networks:
      - backend
    volumes:
      - pgadmin-data:/var/lib/pgadmin

  mongodb:
    image: mongo
    restart: always
    volumes:
      - mongodb-data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: freedomChat!
      MONGO_INITDB_DATABASE: freedomchat
    command: ["--auth"]
    networks:
      - backend    

  mongo-express:
    image: mongo-express
    restart: always
    expose:
      - 8888:8888
    ports:
      - 8888:8888
    environment:
      ME_CONFIG_MONGODB_ENABLE_ADMIN: true
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: freedomChat!
      ME_CONFIG_MONGODB_PORT: 27017
      ME_CONFIG_MONGODB_SERVER: mongodb 
    depends_on:
      - mongodb
    networks:
      - backend

  manager-service:
    container_name: manager-service
    build:
      context: .
      dockerfile: services/manager/Dockerfile.dev
    ports:
      - 8081:8081
    restart: always
    depends_on:
      - mongodb
    environment:
      PORT: 8081
      KAFKA_BROKER: "kafka:9092"
      KAFKA_GROUP_ID: "manager-service-group-id"
      KAFKA_TOPIC: "chat.v1"
      DB_HOST: mongodb://mongodb
      DB_NAME: freedomchat
      DB_USER: root
      DB_PORT: 27017
      DB_PASSWORD: freedomChat!
    volumes:
      - "./services/manager:/app"
      - "./security:/app/security"
    networks:
      - backend    

  chat-service:
    container_name: chat-service
    build:
      context: .
      dockerfile: services/chat/Dockerfile.dev
    ports:
      - 8082:8082
    restart: always
    depends_on:
      - mongodb
    environment:
      PORT: 8082
      KAFKA_BROKER: "kafka:9092"
      KAFKA_GROUP_ID: "chat-service-group-id"
      KAFKA_TOPIC: "chat.v1"
    volumes:
      - "./services/chat:/app"
      - "./security:/app/security"
    networks:
      - backend

  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:5.5.3
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - backend

  kafka:
    container_name: kafka
    image: confluentinc/cp-enterprise-kafka:5.5.3
    depends_on: [zookeeper]
    environment:
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9991
    networks:
      - backend

networks:
  backend:
    driver: bridge
volumes:
  postgres_data:
  pgadmin-data:
  mongodb-data: